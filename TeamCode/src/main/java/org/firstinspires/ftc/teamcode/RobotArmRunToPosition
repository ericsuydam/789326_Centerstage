/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.robotcontroller.external.samples;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;


/*
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When a selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list
 */

@TeleOp(name="Robot Arm Run To Position", group="Linear OpMode")

public class RobotArmRunToPosition extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor leftArm = null;
    private DcMotor rightArm = null;

    private int leftArmPosition = 0;
    private int rightArmPosition = 0;

    private int final COLLECTARGETPOSITION = 0;
    private int final DEPOSITTARGETPOSITION = -1300;

    private double power = 0.0;

    public enum ROBOTSTATES {
      READY, ATCOLLECTPOSITION, ATDEPOSITPOSITION, MOVINGTOCOLLECTPOSITION, MOVINGTODEPOSITPOSITION
      }

    public ROBOTSTATES robotState = null;

    public String robotStateDescription = null;

    public boolean a_isPressed = false;
    public boolean b_isPressed = false;
    public boolean x_isPressed = false;
    public boolean y_isPressed = false;

    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).
        leftArm  = hardwareMap.get(DcMotor.class, "left_arm");
        rightArm = hardwareMap.get(DcMotor.class, "right_arm");

        // To drive forward, most robots need the motor on one side to be reversed, because the axles point in opposite directions.
        // Pushing the left stick forward MUST make robot go forward. So adjust these two lines based on your first test drive.
        // Note: The settings here assume direct drive on left and right wheels.  Gear Reduction or 90 Deg drives may require direction flips
        leftArm.setDirection(DcMotor.Direction.REVERSE);
        rightArm.setDirection(DcMotor.Direction.FORWARD);

        leftArm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightArm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        // leftArm.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        // rightArm.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Set zero power behavior
        leftArm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightArm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        // Assumes starting at Collect Position
        // TODO: Add check of Touch Sensor to confirm at Collect Position
        robotState = ROBOTSTATES.ATCOLLECTPOSITION;

        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry
            double leftPower;
            double rightPower;

            leftArmPosition = leftArm.getCurrentPosition();
            rightArmPosition = rightArm.getCurrentPosition();

            boolean y = gamepad1.y;
            boolean a = gamepad1.a;
            boolean b = gamepad1.b;
            boolean x = gamepad1.x;

            // Check if any buttons changed state
            // x
            if (x || !x_isPressed) {
                // if (x is true) and not(x_isPressed is false)
                x_isPressed = true;
                // if (x is true) and not(x_isPressed is true) then nothing changes
            }
            // y
            if (y || !y_isPressed) {
                // if (y is true) and not(y_isPressed is false)
                y_isPressed = true;
                // if (y is true) and not(y_isPressed is true) then nothing changes
            }
            // a
            if (a || !a_isPressed) {
                // if (a is true) and not(a_isPressed is false)
                a_isPressed = true;
                // if (a is true) and not(a_isPressed is true) then nothing changes
            }
            // b
            if (b || !b_isPressed) {
                // if (b is true) and not(b_isPressed is false)
                b_isPressed = true;
                // if (b is true) and not(b_isPressed is true) then nothing changes
            }

            switch (robotState) {
              
              case READY:
                break;

              case ATCOLLECTPOSITION:
                if (y_isPressed) {
                  leftArm.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                  rightArm.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                  leftArm.setTargetPosition(DEPOSITTARGETPOSITION);
                  rightArm.setTargetPosition(DEPOSITTARGETPOSITION);
                  leftArm.setPower(-power);
                  rightArm.setPower(-power);
                  robotState = ROBOTSTATES.MOVINGTODEPOSITPOSITION;
                }
                break;

              case ATDEPOSITPOSITION:
                if (a) {
                  leftArm.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                  rightArm.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                  leftArm.setTargetPosition(COLLECTARGETPOSITION);
                  rightArm.setTargetPosition(COLLECTARGETPOSITION);
                  leftArm.setPower(power);
                  rightArm.setPower(power);
                  robotState = ROBOTSTATES.MOVINGTOCOLLECTPOSITION;
                }
                break;

              case MOVINGTOCOLLECTPOSITION:
                if (!leftArm.isBusy()) {
                  leftArm.setPower(0.0);
                  rightArm.setPower(0.0);
                  robotState = ROBOTSTATES.ATCOLLECTPOSITION;
                }
                break;

              case MOVINGTODEPOSITPOSITION:
                if (leftArm.isBusy()) {
                    robotState = ROBOTSTATES.MOVINGTODEPOSITPOSITION
                    y_isPressed = false;
                }
                else {
                  leftArm.setPower(0.0);
                  rightArm.setPower(0.0);
                  robotState = ROBOTSTATES.ATDEPOSITPOSITION;
                }
                break;

              default:
                break;
              
            }

            robotStateDescription = getRobotStateDescription(robotState);
          
            // double drive = -gamepad1.left_stick_y;
            
            // leftPower    = Range.clip(drive, -1.0, 1.0) ;
            // rightPower   = Range.clip(drive, -1.0, 1.0) ;

            // Send calculated power to motors
            // leftArm.setPower(leftPower);
            // rightArm.setPower(rightPower);

            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Positions", "left (%d), right (%d)", leftArmPosition, rightArmPosition);
            telemetry.addData("State: " + robotStateDescription);
            telemetry.update();
        }
    }
}

public class getRobotStateDescription (enum ROBOTSTATES robotState) {
  private String robotStateDescription = null;
  switch (robotState) {
    case READY:
      robotStateDescription = "Ready";
      break;
    
    case ATCOLLECTPOSITION:
      robotStateDescription = "At Collect Position";
      break;
    
    case ATDEPOSITPOSITION:
      robotStateDescription = "At Deposit Position";
      break;
    
    case MOVINGTOCOLLECTPOSITION:
      robotStateDescription = "Moving to Collect Position";
      break;
    
    case MOVINGTODEPOSITPOSITION:
      robotStateDescription = "Moving to Deposit Position";
      break;

    default:
      robotStateDescription = "Not Defined";
      break;
    
  }
  return robotStateDescription;
  
}
